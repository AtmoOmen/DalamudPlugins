name: UpdatePluginmaster-Plugin

on:
  release:
    types: [published]

jobs:
  update-main-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install @actions/github jq

      - name: Get the latest release info
        id: get-release
        run: |
          LATEST_RELEASE_INFO=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
          LATEST_RELEASE_URL=$(echo $LATEST_RELEASE_INFO | jq -r '.assets[0].browser_download_url')
          DOWNLOAD_COUNT=$(echo $LATEST_RELEASE_INFO | jq -r '[.assets[].download_count] | @csv')
          RELEASE_FILE_NAME=$(basename $LATEST_RELEASE_URL)
          JSON_FILE_NAME="${RELEASE_FILE_NAME%.*}.json"
          echo "LATEST_RELEASE_URL=$LATEST_RELEASE_URL" >> $GITHUB_ENV
          echo "DOWNLOAD_COUNT=$DOWNLOAD_COUNT" >> $GITHUB_ENV
          echo "JSON_FILE_NAME=$JSON_FILE_NAME" >> $GITHUB_ENV

      - name: Download and Extract the Release
        run: |
          curl -L $LATEST_RELEASE_URL -o release.zip
          unzip release.zip -d ./release_content

      - name: Read JSON file
        id: read-json
        run: |
          JSON_CONTENT=$(cat ./release_content/$JSON_FILE_NAME)
          AUTHOR=$(echo $JSON_CONTENT | jq -r '.Author // empty' | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read()))")
          NAME=$(echo $JSON_CONTENT | jq -r '.Name // empty' | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read()))")
          INTERNAL_NAME=$(echo $JSON_CONTENT | jq -r '.InternalName // empty' | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read()))")
          ASSEMBLY_VERSION=$(echo $JSON_CONTENT | jq -r '.AssemblyVersion // empty' | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read()))")
          DESCRIPTION=$(echo $JSON_CONTENT | jq -r '.Description // empty' | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read()))")
          REPO_URL=$(echo $JSON_CONTENT | jq -r '.RepoUrl // empty' | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read()))")
          PUNCHLINE=$(echo $JSON_CONTENT | jq -r '.Punchline // empty' | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read()))")
          echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
          echo "NAME=$NAME" >> $GITHUB_ENV
          echo "INTERNAL_NAME=$INTERNAL_NAME" >> $GITHUB_ENV
          echo "ASSEMBLY_VERSION=$ASSEMBLY_VERSION" >> $GITHUB_ENV
          echo "DESCRIPTION=$DESCRIPTION" >> $GITHUB_ENV
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          echo "PUNCHLINE=$PUNCHLINE" >> $GITHUB_ENV


      - name: Trigger Target Repo Workflow with JSON Data
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github.everest-preview+json" \
          --data '{"event_type": "update-plugin", "client_payload": {"url": "'$LATEST_RELEASE_URL'", "downloadcount": "'$DOWNLOAD_COUNT'", "author": "'$(echo $AUTHOR | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.stdin.read()))")'", "name": "'$(echo $NAME | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.stdin.read()))")'", "internalname": "'$(echo $INTERNAL_NAME | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.stdin.read()))")'", "assemblyversion": "'$(echo $ASSEMBLY_VERSION | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.stdin.read()))")'", "description": "'$(echo $DESCRIPTION | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.stdin.read()))")'", "repourl": "'$(echo $REPO_URL | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.stdin.read()))")'", "punchline": "'$(echo $PUNCHLINE | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.stdin.read()))")'"}}' \
          https://api.github.com/repos/AtmoOmen/DalamudPlugins/dispatches

          